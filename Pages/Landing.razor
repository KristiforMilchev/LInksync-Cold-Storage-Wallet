@page "/Landing"
@using NFTLock.Data
@using Nethereum.Contracts
@using Nethereum.Web3
@using Newtonsoft.Json
@using SYNCWallet.Data
@using SYNCWallet.Models
@using System.Security.Cryptography
@using System.Text
@using SYNCWallet.Services
@using SYNCWallet.Services.Definitions
@using SYNCWallet.Services.Implementation
@using System.Timers
 
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<link href="/css/landing.css" rel="stylesheet">

<img src="/logo.png" class="LogoMainBackground" />
<p id="submitTrigger" style="display:none" onclick="DataSubmitted">

</p>
<NavMenu NetworkAdded="ImportNetwork" TokenImported="ImportToken">

 </NavMenu>
 
 

<div class="container">
    <div class="flexInnerRow">
        <p style="margin:auto;">
            @Communication.PublicAddress
        </p>
        <div class="NetworkDropdown">
            <a class="nav-link dropdown-toggle waves-effect waves-dark"   href="#" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false" style="color: black;font-weight: 400;">
                <i class="me-2 mdi mdi-access-point-network"></i>
                @if(SelectedNetwork != null)
                {
                    <span id="network">@SelectedNetwork.Name</span>
                }
            </a>
            <div id="dropdownNetworks" class="dropdown-menu dropdown-menu-end user-dd animated flipInY" style="left: 68%;top: 4%; position:absolute !important;"> 
                @if (Networks != null)
                {
                    @foreach (var network in Networks)
                    {
                        <a class="dropdown-item"  @onclick="(() => NetworkChanged(network))">
                            <i class="me-2 mdi mdi-access-point-network"></i>
                            @network.Name
                        </a>
                    }
         
                }
            </div>

            <button class="btn btn-outline-secondary" @onclick="OpenNetworkImport" type="button">
                <i class="fas fa-cog"></i>
                Network Settings
            </button>
 
        </div>
    </div>
    <!-- Row -->
    <div class="row" style="display:none;">
        <div class="col-12">
            <div class="card">
                <div >
                    <div class="col-lg-8">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-0">Balance History @TokenName</h6>
                        </div>
                    </div>


                    <div id="android-vs-ios" class=" border-top"> </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row" >

        <div class="row" style="margin:0;">

            <!-- Column -->
            <div class="col-lg-4 col-md-6">
                <div class="card">
                    <div class="card-body">
                        <!-- Row -->
                        <div >
                            <div >
                                <span class="display-6">
                                    @if(SelectedToken != null)
                                    {
                                        @Utilities.TruncateDecimals(SelectedContract.CurrentPrice)
                                         <span style="margin-left:5px;"> USD </span>
                                    }
                                    <i class="ti-angle-down fs-3 text-danger"></i>
                                </span>
                                <h6>Price</h6>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
            <!-- Column -->
            <div class="col-lg-4 col-md-6">
                <div class="card">
                    <div class="card-body">
                        <!-- Row -->
                        <div >
                            <div >
                                <span class="display-6">
                                    @if (SelectedToken != null)
                                    {
                                        @SelectedContract.CirculatingSupply.ToString("#.##")
                                        <span style="margin-left:5px;"> @SelectedToken.Symbol </span>
                                    }
                                    <i class="ti-angle-up fs-3 text-success"></i>    
                                </span>
                                <h6>Circulating Supply</h6>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Column -->
            <div class="col-lg-4 col-md-6">
                <div class="card">
                    <div class="card-body">
                        <!-- Row -->
                        <div >
                            <div >
                                <span class="display-6">
                                    @if(SelectedToken != null)
                                    {
                                        @SelectedContract.MarketCap.ToString("C2")
                                    }                                
                                    <i class="ti-angle-up fs-3 text-success"></i>
                                </span>
                                <h6>Market Cap</h6>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <div class="row" style="margin:0;">
            <div class="col-md-12">
                <div class="card">
                        <div class="card-body contentCard">
                            <div class="table-responsive" style="display:@Communication.HideTokenList" id="TokenList">
                                <button class="btn btn-outline-secondary" @onclick="ToggleTokenImport" type="button">
                                    <i class="fas fa-cog"></i>
                                    Import Custom
                                </button>
                                <table class="table stylish-table v-middle mb-0 no-wrap">
                                    
                                    <thead>
                                
                                        <tr>
                                            <th class="border-0 text-muted fw-normal" colspan="2">SYMBOL</th>
                                            <th class="border-0 text-muted fw-normal">Amount</th>
                                            <th class="border-0 text-muted fw-normal">Price USDT</th>
                                        </tr>

                                    </thead>
                                    <tbody>
                                        @if(Tokens != null)
                                        {
                                            @foreach (var token in Tokens)
                                            {
                                                var contract = default(TokenContract);
                                                if (token.Contracts != null && token.Contracts.Count > 0)
                                                {
                                                    contract = token.Contracts.FirstOrDefault();
                                                }
                                                <tr @onclick="(() => SelectToken(contract, token))">
                                                    <td style="width:50px; text-align:left">
                                                        @if(string.IsNullOrEmpty(token.Logo))
                                                        {
                                                        <i class="mdi mdi-alert" style="font-size: 2rem;color: #f3bb2b;"></i>
                                                        }
                                                        else
                                                        {
                                                            <img style="width: 100%;border-radius: 50%" src="@token.Logo" />
                                                        }
                                                    </td>
                                                    <td style="text-align:left;">
                                                        <h6 class="font-weight-medium mb-0">@token.Name</h6>
                                                        <small class="text-muted">
                                                            @token.Symbol
                                                        </small>
                                                    </td>
                                                    @if (contract != null)
                                                    {
                                                        <td class="text-muted">
                                                            @Utilities.TruncateDecimals(contract.UserBalance)
                                                        </td>
                                                        <td class="text-muted">
                                                            @if (contract.Price == null)
                                                            {
                                                                @: "--"
                                                            }
                                                            else
                                                            {
                                                               @Utilities.TruncateDecimals(contract.Price)
                                                            }
                                                        </td>
                                                    }
                                                    else
                                                    {
                                                        <td class="text-muted">
                                                           --
                                                        </td>
                                                        <td class="text-muted">$ -- </td>
                                                    }

                                                </tr>


                                            }
                                        }
                                   
                                    
                                    </tbody>
                                </table>
                            </div>
                            @if (SelectedToken != null)
                            {
                                <div id="SendToken" style="display:@Communication.HideTokenSend">
                                    <div class="row" style="    margin-top: 25px;">
                                    <a class="nav-link sidebartoggler waves-effect waves-light" @onclick="CancelSend" style="font-size: 25px;"><i class="icon-arrow-left-circle"></i> Return</a>
                                    </div>
                                    <div class="row" style="margin-top: 30px;margin-top: 30px;
                                                                            display: flex;
                                                                            flex-direction: row;
                                                                            justify-content: center;">
                                        
                                    </div>
                                    <div  class="flexInnerRow">
                                        <h2 style="text-align:center">
                                            @SelectedToken.Name
                                        </h2>
                                        
                                    </div>
                                    <div class="flexInnerRow">

                                        <p style="width: 602px;">
                                            @if(!string.IsNullOrEmpty(SelectedToken.Description))
                                            {
                                                @SelectedToken.Description
                                            }
                                            else
                                            {
                                                @: This token, is not officially listed on the vetted token list, trading and transfering it may cause substancial damage to your entire portfolio!
                                            }
                                        </p>
                                    </div>
                                    <div class="flexInnerRow">
                                            <div style="display: flex;flex-direction: row;width: 510px;justify-content: space-evenly;">
                                            @if (SelectedToken.Links != null)
                                            {
                                                @foreach (var link in SelectedToken.Links)
                                                { 
                                                    <button class="btn btn-linkedin waves-effect btn-circle waves-light" @onclick="(() => OpenLink(link))" type="button">
                                                        @switch (link.Type)
                                                        {
                                                            case LinkTypes.Facebook:
                                                                <i class="fab fa-facebook"></i>
                                                                break;
                                                            case LinkTypes.Telegram:
                                                                <i class="fab fa-telegram"></i>
                                                                break;
                                                            case LinkTypes.Twitter:
                                                                <i class="fab fa-twitter"></i>
                                                                break;
                                                            case LinkTypes.Website:
                                                                <i class="mdi mdi-web"></i>
                                                                break;
                                                            case LinkTypes.Reddit:
                                                                <i class="mdi mdi-reddit"></i>
                                                                break;
                                                            case LinkTypes.Exchange:
                                                                <i class="fas fa-money-bill-alt"></i>
                                                                break;
                                                        }
                                                        
                                                    </button>
                                                }
                                            }
                                                
                                    
                                            </div>
                                        </div>
                                        <div class="flexInnerRow">
                                            <div class="form-floating distanceTop" style="    width: 600px;">
                                        <input @bind-value="ReceiverAddress" class="form-control inputStyle">
                                                <label>
                                                    <i class="me-2 icon-wallet"></i>
                                                    <span class="border-start border-danger ps-3 ">Wallet Address</span>
                                                </label>

                                            </div>
                                        </div>
                                        <div class="flexInnerRow">
                                            <div class="form-floating distanceTop form-group" style="    width: 600px;     display: flex;">
                                            <input @bind-value="TokensToSend" type="text" class="form-control inputStyle" placeholder="test">
                                                <button @onclick="SetMaxAmount" class="btn btn-outline-secondary" type="button">MAX</button>
                    
                                                <label  >
                                                    <i class="me-2 mdi mdi-lock"></i>
                                                    <span class="border-start border-danger ps-3 ">Amount</span>
                                                </label>
                                            </div>
                                        </div>

                                        <div class="row" style="margin-top: 30px;margin-top: 30px;
                                                                        display: flex;
                                                                        flex-direction: row;
                                                                        justify-content: center;">
                                            <button style="width: 300px;" @onclick="SendToken" type="button" class="btn waves-effect waves-light btn-rounded btn-info">
                                                <i class="icon-wallet"></i>
                                                Send
                                            </button>
                                        </div>
                            
                                </div>
                            }
                            @*TODO: Extract this as component*@
                            <div style="display:@Communication.ShowPinPanel;flex-direction: column;
                                    align-content: space-around;
                                    flex-wrap: wrap;
                                    height: 100%;
                                    justify-content: center;
                                    align-items: center;">
                                <div class="row" style="width: 100%;display: flex;justify-content: center;align-items: center; padding:0; margin:0;">
                                    <div class="col-md-4 col-sm-12 " style="    min-width: 500px;">
                                 
                                        <div class="row"  >
                                            <div class="card" style="padding: 0;overflow: hidden;">
                                                <div class="card-header bg-light">
                                                    <h4 class="mb-0 text-white" style="text-align:center">Login</h4>
                                                </div>
                                                <div class="card-body">
                 
                                                    <div class="form-floating distanceTop">
                                                        <input id="LPassword" @bind-value="Password" minlength="8" maxlength="8" type="password" class="form-control inputStyle" placeholder="Test Password">
                                                        <label>
                                                            <i class="me-2 mdi mdi-lock"></i>
                                                            <span class="border-start border-danger ps-3 ">Password</span>
                                                        </label>
                                                    </div>

                                                    <div class="row" style="margin-top: 30px;margin-top: 30px;
                                                        display: flex;
                                                        flex-direction: row;
                                                        justify-content: center;">
                                                        <button @onclick="EnterPin" style="width: 300px;" type="button" class="btn waves-effect waves-light btn-rounded btn-info">
                                                            <i class="icon-wallet"></i>
                                                            Unlock
                                                        </button>
                                                    </div>
                         
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        
                        <Loader BindingData="@Communication.TxHash"></Loader>
                        <div style="display:@Communication.Receipt;flex-direction: column;align-content: space-around;flex-wrap: wrap;height: 100%;justify-content: center;">
                                @if(Receipt != null && SelectedToken != null)
                                {
                                    <div class="row">
                                        <p>
                                            From: <span>@Receipt.From</span>
                                        </p>
                                    </div>
                                    <div class="row">
                                        <p>
                                            To: <span>@Receipt.To</span>
                                        </p>
                                    </div>
                                    <div class="row">
                                        <p>
                                            At: <span>@Receipt.Timestamp.ToShortDateString() @Receipt.Timestamp.ToShortTimeString()</span>
                                        </p>
                                    </div>
                                    <div class="row">
                                        <p>
                                            Hash: <span>@Receipt.TransactionHash</span>
                                        </p>
                                    </div>
                                    <div class="row">
                                        <p>
                                            Sent Amount: <span>@TokensToSend @SelectedToken.Symbol</span>
                                        </p>
                                    </div>
                                    <div class="row" style="margin-top: 30px;margin-top: 30px;
                                                            display: flex;
                                                            flex-direction: row;
                                                            justify-content: center;">
                                        <button @onclick="CloseReceipt" style="width: 300px;" type="button" class="btn waves-effect waves-light btn-rounded btn-info">
                                            <i class="icon-wallet"></i>
                                            Ok
                                        </button>
                                    </div>
                                }
                                   
                              
                            </div>
                        </div>
                  
                </div>
            </div>
        </div>


    </div>

</div>



@code {


    public string TokenName { get; set; }
    private bool IsChartRendered { get; set; }
    List<Token> Tokens { get; set; }
    private List<NetworkSettings> Networks { get; set; }
    public string WalletAddress { get; set; }


    public NetworkSettings SelectedNetwork { get; set; }
    public Token SelectedToken{ get; set; }
    public TokenContract SelectedContract { get; set; }

    private decimal TokensToSend { get; set; }
    private string ReceiverAddress { get; set; }

    private string Password { get; set; }

    TransactionResult Receipt { get; set; }
    System.Timers.Timer BalanceCheck { get; set; }
    DateTime NextCheck { get; set; }

    IUtilities Utilities { get; set; }
    IAuthenicationService AuthenicationService { get; set; }
    IPaymentService PaymentService { get; set; }
    IHardwareService HardwareService { get; set; }
    ICommunication Communication { get; set; }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!IsChartRendered)
        {
            Task.Run(() => JS.InvokeAsync<string>("RenderChart"));

            Task.Run(() => JS.InvokeAsync<string>("requestMedia"));
            IsChartRendered = !IsChartRendered;
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {


        Utilities = ServiceHelper.GetService<IUtilities>();
        AuthenicationService = ServiceHelper.GetService<IAuthenicationService>();
        PaymentService = ServiceHelper.GetService<IPaymentService>();
        HardwareService = ServiceHelper.GetService<IHardwareService>();
        Communication = ServiceHelper.GetService<ICommunication>();
        Communication.LoginAttempt = Callback;

        NextCheck = NextCheck.AddMinutes(1);
        Communication.HideTokenList = "";
        Communication.HideTokenSend = "none";
        Communication.ShowPinPanel = "none";
        Communication.ShowLoader = "none";
        Communication.Receipt = "none";


        BalanceCheck = new System.Timers.Timer();
        BalanceCheck= new System.Timers.Timer();
        BalanceCheck.Elapsed += new ElapsedEventHandler(OnBalanceUpdate);
        BalanceCheck.Interval = 5000;
        BalanceCheck.Start();


        TokenName = "SYNC";

        //Load Network Settings
        var utils = new Utilities();
        Communication.NetworkSettings = await utils.SetupNetworks();
        Networks = Communication.NetworkSettings.Where(x=> x.IsProduction == Communication.IsDevelopment).ToList();
        SelectedNetwork = Networks.FirstOrDefault();
        Communication.ActiveNetwork = SelectedNetwork;
        WalletAddress = AuthenicationService.GetDefault();
        Tokens = await AuthenicationService.GetSupportedTokens(SelectedNetwork.Id); //Get All tokens and their balance
        Task.Run(() => DefaultToToken());
        NextCheck = DateTime.UtcNow.AddSeconds(20);
    }



    async void Callback(bool status)
    {
        Communication.TriggerLoader.Invoke("none");
        if(status)
        {
            var result = await PaymentService.BeginTransaction();

            if (result != null)
            {
                await InvokeAsync(() =>
                {
                    Communication.ShowLoader = "none";
                    Communication.HideTokenList = "none";
                    Communication.HideTokenSend = "none";
                    Communication.ShowPinPanel = "none";
                    Communication.Receipt = "flex";
                    Receipt = result;
                    StateHasChanged();

                });
            }
        }
        else
            InvokeAsync(() =>
            {
                Communication.ShowLoader = "none";
                Communication.HideTokenList = "";
                Communication.HideTokenSend = "none";
                Communication.ShowPinPanel = "none";
                Communication.Receipt = "none";

                StateHasChanged();

            });

    }

    private void NetworkChanged(NetworkSettings network)
    {
        InvokeAsync(async () =>{
            SelectedNetwork = network;
            Communication.ActiveNetwork = SelectedNetwork;
            Tokens = await AuthenicationService.GetSupportedTokens(SelectedNetwork.Id);
            StateHasChanged();
        });
    }


    private async void DefaultToToken()
    {
        try
        {
            await InvokeAsync(async () =>
            {
                if (SelectedNetwork != null)
                {
                    var updateTokens =  await AuthenicationService.GetTokenDetails(SelectedNetwork.Id); //Get All tokens and their balance
                    var getNetwork = updateTokens.FirstOrDefault().Contracts.FirstOrDefault().Network;
                    //We don't want  updates in case we have already switched network since last request.
                    if (getNetwork == SelectedNetwork.Id)
                        Tokens = updateTokens;

                    
                    NextCheck = DateTime.UtcNow.AddSeconds(20);
                    StateHasChanged();
                }

            });
        }
        catch (Exception)
        {

            throw;
        }



    }

    private void SelectToken(TokenContract contract, Token token)
    {
        InvokeAsync(() =>
        {
            SelectedToken = token;
            SelectedContract = contract;
            Communication.SelectedContract = contract;
            Communication.Receipt = "none";
            Communication.HideTokenList = "none";
            Communication.ShowPinPanel = "none";
            Communication.ShowLoader = "none";
            Communication.HideTokenSend = "";

            StateHasChanged();
        });
    }

    private void SetMaxAmount()
    {

        InvokeAsync(() =>
        {
            TokensToSend = SelectedContract.UserBalance;
        });
    }

    private void CancelSend()
    {
        InvokeAsync(() =>
        {
            Communication.HideTokenList = "";
            Communication.HideTokenSend = "none";
            Communication.ShowPinPanel = "none";
            Communication.ShowLoader = "none";
            Communication.Receipt = "none";


            StateHasChanged();
        });
    }

    private async void ToggleTokenImport()
    {


        await JS.InvokeVoidAsync("ImportTokens");
    }

    private async void OpenNetworkImport()
    {
        await JS.InvokeVoidAsync("ImportNewNetwork");
    }

    public async Task ImportNetwork()
    {


        await InvokeAsync(async () =>
        {
            var utils = new Utilities();
            Communication.NetworkSettings = await utils.SetupNetworks();
            Networks = Communication.NetworkSettings.Where(x => x.IsProduction == Communication.IsDevelopment).ToList();
            StateHasChanged();

        });


    }

    public async Task ImportToken()
    {
        await InvokeAsync(async () =>
        {
            Tokens = await AuthenicationService.GetSupportedTokens(SelectedNetwork.Id); //Get All tokens and their balance
            StateHasChanged();
        });
    }


    private void SendToken()
    {
        InvokeAsync(() =>
        {
            Communication.Receipt = "none";
            Communication.HideTokenList = "none";
            Communication.HideTokenSend = "none";
            Communication.ShowLoader = "none";
            Communication.ShowPinPanel = "flex";
            StateHasChanged();

        });
    }



    private async void EnterPin()
    {
        if (Password.Length < 8)
            return;

        Communication.TriggerLoader.Invoke("flex");
        await InvokeAsync(() =>
        {
            Communication.ShowLoader = "flex";
            Communication.HideTokenList = "none";
            Communication.HideTokenSend = "none";
            Communication.ShowPinPanel = "none";
            Communication.Receipt = "none";

            StateHasChanged();

        });

        var passwrod = HardwareService.Encrypt(Password, "iV1z@$H8");
        Communication.KeepPrivateSingle = true;
        Communication.Amount = TokensToSend;
        Communication.ReceiverAddress = ReceiverAddress;

        Communication.WriteState(JsonConvert.SerializeObject(new HardwareWallet
        {
            Cmd = "Login",
            Password = passwrod,
            PrivateKey = "+"
        }));

        Communication.Pass = Password;
 
        InvokeAsync(() =>
        {
            Password = "";
            StateHasChanged();
        });

    }

   

    private void OnBalanceUpdate(object source, ElapsedEventArgs e)
    {

        if (DateTime.UtcNow > NextCheck)
        {
            Task.Run(() => DefaultToToken());
            NextCheck = DateTime.UtcNow.AddSeconds(20);
        }

    }


    private async void CloseReceipt()
    {
        await InvokeAsync(() =>
        {
            Communication.ShowLoader = "none";
            Communication.HideTokenList = "";
            Communication.HideTokenSend = "none";
            Communication.ShowPinPanel = "none";
            Communication.Receipt = "none";
            SelectedContract.UserBalance -= TokensToSend;
            TokensToSend = 0;
            ReceiverAddress = "";
            StateHasChanged();

        });
    }

    private async void OpenLink(TokenLink link)
    {
        Uri uri = new Uri(link.Url);
        await Browser.Default.OpenAsync(uri, BrowserLaunchMode.SystemPreferred);
    }
}  