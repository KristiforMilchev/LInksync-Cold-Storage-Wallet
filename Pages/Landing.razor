@page "/Landing"
@using NFTLock.Data
@using Newtonsoft.Json
@using SYNCWallet.Models
@using System.Security.Cryptography
@using System.Text
 
@inject NavigationManager NavigationManager
@inject IJSRuntime JS


<img src="/logo.png" class="LogoMainBackground" />
<p id="submitTrigger" style="display:none" onclick="DataSubmitted">

</p>
 <NavMenu>

 </NavMenu>

 

<div class="container">
    <!-- Row -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="row">
                    <div class="col-lg-8">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-0">Balance History @TokenName</h6>
                        </div>
                    </div>


                    <div id="android-vs-ios" class=" border-top"> </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row" >

        <div class="row" style="margin:0;">

            <!-- Column -->
            <div class="col-lg-4 col-md-6">
                <div class="card">
                    <div class="card-body">
                        <!-- Row -->
                        <div class="row">
                            <div class="col-8">
                                <span class="display-6">0.00000458 <i class="ti-angle-down fs-3 text-danger"></i></span>
                                <h6>Price</h6>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
            <!-- Column -->
            <div class="col-lg-4 col-md-6">
                <div class="card">
                    <div class="card-body">
                        <!-- Row -->
                        <div class="row">
                            <div class="col-8">
                                <span class="display-6">500 000 <i class="ti-angle-up fs-3 text-success"></i></span>
                                <h6>Circulating Supply</h6>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Column -->
            <div class="col-lg-4 col-md-6">
                <div class="card">
                    <div class="card-body">
                        <!-- Row -->
                        <div class="row">
                            <div class="col-8">
                                <span class="display-6">$ 6 000 000 <i class="ti-angle-up fs-3 text-success"></i></span>
                                <h6>Market Cap</h6>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <div class="row" style="margin:0;">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body" style="height: 50vh;overflow: hidden;overflow-y: scroll;">

                        <div class="table-responsive">
                            <table class="table stylish-table v-middle mb-0 no-wrap">
                                <thead>
                                    <tr>
                                        <th class="border-0 text-muted fw-normal" colspan="2">SYMBOL</th>
                                        <th class="border-0 text-muted fw-normal">Amount</th>
                                        <th class="border-0 text-muted fw-normal">Price USDT</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach(var token in Tokens)
                                    {
                                        var contract = token.Contracts.FirstOrDefault(x => x.Network == 1);
                                       
                                        <tr>
                                            <td style="width:50px;">
                                                <img src="@token.Logo"/>   
                                            </td>
                                            <td>
                                                <h6 class="font-weight-medium mb-0">Link SYNC</h6>
                                                <small class="text-muted">
                                                    @token.Symbol
                                                </small>
                                            </td>
                                            <td>@contract.UserBalance</td>
                                            <td><span class="badge bg-success px-2 py-1">@contract.UserBalance / @Tokens.FirstOrDefault(x=>x.IsChainCoin).Contracts.FirstOrDefault().UserBalance</span></td>
                                        </tr>


                                    }
                                    
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>


    </div>

</div>



@code {

    public string TokenName { get; set; }
    private bool IsChartRendered { get; set; }
    AuthenicationHandler Authenication { get; set; }
    List<Token> Tokens { get; set; }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!IsChartRendered)
        {
            Task.Run(() => JS.InvokeAsync<string>("RenderChart"));

            Task.Run(() => JS.InvokeAsync<string>("requestMedia"));
            IsChartRendered = !IsChartRendered;
        }

        return base.OnAfterRenderAsync(firstRender);
    }
    protected override async Task OnInitializedAsync()
    {
        TokenName = "SYNC";

        Authenication = new AuthenicationHandler();
        var tokens = await Authenication.GetSupportedTokens(1);
        Tokens = new List<Token>();

        //Load Tokens and user balance.
        tokens.ForEach(x =>
        {

            var current = x.Contracts;
            var newToken = x;
            newToken.Contracts = new List<TokenContract>();
            var newList = new TokenContract();
            current.ForEach(async y =>
            {
                var getUserDetails = await Authenication.GetUserTokenBalance(1, y, x.IsChainCoin);
                newToken.Contracts.Add(getUserDetails);
            });
            Tokens.Add(newToken);
        });
    }

}  