@page "/"
@using System.Net
@using System.Timers
@using System.Numerics
@using ArduinoUploader.Hardware
@using NFTLock.Data
@using System.IO.Ports
@using System.Diagnostics

@inject NavigationManager NavigationManager
@inject IJSRuntime JS
 


<div class="container FixCenter" id="LoginPanel" style="height:100vh; display:flex;">
    <div class="row" style="width: 100%;display: flex;justify-content: center;align-items: center; padding:0; margin:0;">
        <div class="col-md-4 col-sm-12 " style="    min-width: 500px;">
            <div class="row" style="display: flex;flex-direction: row;align-items: center;justify-content: center;">
                <img src="/logo.png" style="width: 250px;height: 200px;" alt="homepage" class="light-logo" />

            </div>
            <div class="row" style="margin-top: 50px;">
                <h2 style="color:#EA7080; text-align:center; font-size:25pt;padding: 50px;">
                    Connect and select ATmega328 compatable device.
                </h2>
            </div>
            <a class="nav-link dropdown-toggle waves-effect waves-dark" href="#" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false" style="color: black;font-weight: 400; text-align:center;">
                <i class="me-2 mdi mdi-access-point-network"></i>
                <span id="network" style="text-align:center; width:100%;">@DeviceModel.ToString()</span>
                
            </a>
            <div id="dropdownNetworks" class="dropdown-menu dropdown-menu-end user-dd animated flipInY" style="left: 68%;top: 4%; position:absolute !important;">
                @if (Devices != null)
                {
                    @foreach (var device in Devices)
                    {
                        <a class="dropdown-item" @onclick="(() => DeviceChanged(device))">
                            <i class="me-2 mdi mdi-access-point-network"></i>
                            @device.ToString()
                        </a>
                    }

                }
            </div>
        </div>
    </div>
</div>

@code {
    private AuthenicationHandler AuthenicationHandler { get; set; }
    private HardwareService HardwareService { get; set; }
    private string Address { get; set; }
    private string Port{ get; set; }

    public ArduinoModel DeviceModel { get; set; }
    public List<ArduinoModel> Devices { get; set; }

    System.Timers.Timer aTimer { get; set; }


    protected override Task OnAfterRenderAsync(bool firstRender)
    {

        return base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        AuthenicationHandler = new AuthenicationHandler();
        HardwareService = new HardwareService();
        //Get Supported Devices
        Devices = HardwareService.GetSupportedDevices();

        Port = HardwareService.DeviceConnected();
        aTimer = new System.Timers.Timer();
        aTimer.Elapsed += new ElapsedEventHandler(OnTimedEvent);
        aTimer.Interval = 5000;
        aTimer.Start();

    }

    // Specify what you want to happen when the Elapsed event is raised.
    private void OnTimedEvent(object source, ElapsedEventArgs e)
    {

        Port = HardwareService.DeviceConnected();
        if(!string.IsNullOrEmpty(Port))
        {
            aTimer.Stop();
            aTimer.Dispose();
        }
    }

    private async Task<bool> CheckDeviceConnected(string port)
    {
 


        try
        {
            if (!string.IsNullOrEmpty(port))
            {
                var firmwareUpdated = await HardwareService.CreateNewDevice(port);

                var configStatus = MauiProgram.CheckConfigured();

                if (configStatus && firmwareUpdated)
                {

                    KillTimer();
                    NavigationManager.NavigateTo("LoginPanel");
                }
                else
                {
                    KillTimer();
                    NavigationManager.NavigateTo("Create");

                }
            }
           
        }
        catch (Exception e)
        {

            throw;
        }
     
        return true;
    }


    private void KillTimer()
    {
        if (aTimer != null)
        {
            aTimer.Stop();
            aTimer.Dispose();
        }
    }

    private void DeviceChanged(ArduinoModel deviceType)
    {
        InvokeAsync(async () =>
        {
            DeviceModel = deviceType;
            MauiProgram.DeviceType = deviceType;
            await CheckDeviceConnected(Port);
            StateHasChanged();

        });

        

    }
}