@page "/LoginPanel"
@using System.Net
@using System.Numerics
@using NFTLock.Data
@using Newtonsoft.Json
@using SYNCWallet.Models
@using SYNCWallet.Services
@using SYNCWallet.Services.Definitions

@inject NavigationManager NavigationManager
@inject IJSRuntime JS


<div class="container FixCenter" id="LoginPanel" style="height:100vh; display:flex;">
    <div class="row" style="width: 100%;display: flex;justify-content: center;align-items: center; padding:0; margin:0;">
        <div class="col-md-4 col-sm-12 " style="    min-width: 500px;">
            <div class="row" style="display: flex;flex-direction: row;align-items: center;justify-content: center;">
                <img src="/logo.png" style="width: 250px;height: 200px;" alt="homepage" class="light-logo" />

            </div>
            <div class="row" style="margin-top: 50px;">
                <div class="card" style="padding: 0;overflow: hidden;">
                    <div class="card-header bg-light">
                        <h4 class="mb-0 text-white" style="text-align:center">Login</h4>
                    </div>
                    <div class="card-body">
                 
                        <div class="form-floating distanceTop">
                            <input id="LPassword" @bind-value="Password" type="password" minlength="8" maxlength="8" class="form-control inputStyle" placeholder="Test Password">
                            <label>
                                <i class="me-2 mdi mdi-lock"></i>
                                <span class="border-start border-danger ps-3 ">Password</span>
                            </label>
                        </div>

                        <div class="row" style="margin-top: 30px;margin-top: 30px;
                            display: flex;
                            flex-direction: row;
                            justify-content: center;">
                            <button @onclick="LoginPublic" style="width: 300px;" type="button" class="btn waves-effect waves-light btn-rounded btn-info">
                                <i class="icon-wallet"></i>
                                Unlock
                            </button>
                        </div>
                         
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private string Password{ get; set; }
    IHardwareService HardwareService { get; set; }
    ICommunication Communication { get; set; }


    protected override async Task OnInitializedAsync()
    {
        HardwareService = ServiceHelper.GetService<IHardwareService>();
        Communication = ServiceHelper.GetService<ICommunication>();
        Communication.LoginAttempt = Callback;
        if (Communication.IsLogged && !string.IsNullOrEmpty(Communication.PublicAddress))
        {
            NavigationManager.NavigateTo("Landing");

        }
    }

    void Callback(bool status)
    {
        InvokeAsync(() =>
        {
            Communication.ShowLoader = "none";
            Communication.HideTokenList = "";
            Communication.HideTokenSend = "none";
            Communication.ShowPinPanel = "none";
            Communication.Receipt = "none";

            StateHasChanged();

        });

        if (Communication.IsLogged && !string.IsNullOrEmpty(Communication.PublicAddress))
        {
            NavigationManager.NavigateTo("Landing");
        }

    }



    private void LoginPublic()
    {
        if (Password.Length < 8)
        {
            //TODO send error message.
            return;
        }

        var passwrod = HardwareService.Encrypt(Password, "iV1z@$H8");
        Communication.Pass = Password;

        switch(Communication.SoftwareType)
        {
            case Enums.ConfigMode.ColdWallet:
                Communication.WriteState(JsonConvert.SerializeObject(new HardwareWallet
                    {
                        Cmd = "Login",
                        Password = passwrod,
                        PrivateKey = "3"
                    }));
                break;
            case Enums.ConfigMode.HotWallet:
                Communication.ReadInternalStorage(passwrod);
                break;
        }
    }
}